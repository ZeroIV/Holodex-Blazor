@page "/upcoming"
@using HoloDex_UI.Data
@using Newtonsoft.Json
@inject HoloClient client
@inject NavigationManager NavigationManager

<PageTitle>Live and Upcoming</PageTitle>

<h1>Live & Upcoming by Organization</h1>
<div class="searchDropdown">
    <br/>
    <select @onchange="OnDropdownChange">
        <option value=null>Selection</option>
        <option value="">All Upcoming</option>
        @foreach (var item in orgs)
        {
            <option value="@item">@item</option>
        }
    </select>
</div>
<button class="btn-search" @onclick="GetStreamsAsync">Search</button>
<br />
@if (videos == null)
{
    setContentMessage("Please make a selection");
    <p><em>@contentMessage</em></p>
}
else
{
    <div>
    @if (videos.FirstOrDefault() != null)
    {                       
        <div class="vid-cards-list">
        @foreach (var vid in videos)
        {
            @if (vid.ActualEnd == null)
            {
            /* @if (vid.Status == "live"){ */
                <div class="vid-card" id=@vid.Status >
                    <div class="card-contents" @onclick=@(() => GetStream(vid.VideoId))>
                        <em>@vid.Topic</em><br />
                        <img class="channel-img" src="@vid.Channel.PhotoUrl"/>
                        <h8>@vid.Title</h8>
                        <time>@vid.AvailableAt.ToLocalTime().ToShortDateString() @vid.AvailableAt.ToLocalTime().ToShortTimeString()</time>
                    </div>
                </div>
            }                    
        }
        </div>
    }
    else
    {
        setContentMessage("No results found");
        <p><em>@contentMessage</em></p>
    }
    </div>
}

@code {
    private List<Video>? videos;
    private List<string> orgs = new List<string>(Organization.GetOrganizations);

    private string contentMessage = ""; 
    private string? selection;

    protected async Task GetStreamsAsync()
    {
        if (selection != null)
        {
            videos = (List<Video>)await client.GetStreams(selection);
        }
        else
        {
            setContentMessage("Selection is required!");
            StateHasChanged();
            //error message should display
        }
    }

    void setContentMessage(string str)
    {
        contentMessage = str;
    }

    void GetStream (string videoId)
    {
        NavigationManager.NavigateTo($"/EmbedVideo/{videoId}", true);
    }

    protected void OnDropdownChange(ChangeEventArgs e)
    {
        selection = e.Value?.ToString();
    }

    // method invoked for for debugging purposes
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
}
